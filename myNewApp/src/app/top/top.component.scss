#block-null {
    z-index: 0.5;
}

#block-eins {
    background-image: url('/assets/brick-wall.png');
    padding: 100px;
    margin: auto;
    text-align: center;
    color: white;
    z-index: 1;
    -webkit-box-shadow: inset 0 50px 50px -50px #000000da;
    -moz-box-shadow: inset 0 50px 50px -50px rgba(0, 0, 0, 0.8);
    box-shadow: inset 0 50px 50px -50px rgba(0, 0, 0, 0.8);
}

#block-zwei {
    background-color: black;
    padding: 50px 20%;
    margin: auto;
    text-align: center;
    color: #cacaca;
    display: flex;
    justify-content: space-between;
    /* 必要に応じて間隔を調整 */
    align-items: center;
    /* 縦方向の中央揃え */
    box-shadow:
        0px 0px 50px #000000bd;
    z-index: 4;
}

#block-zwei>div:last-child {
    flex: 2;
    padding: 10px;
}

#block-drei {
    display: flex;
    /* 子要素を横並びにする */
    width: 100%;
    /* 親要素の幅を全体に広げる */
    z-index: 3;
}

#how-to {
    flex: 0 0 70%;
    /* 幅を60%に設定 */
    background-image: url('/assets/concrete.png');
    /* 必要に応じて背景色を設定 */
    padding: 50px 20px;
    text-align: center;
}

#user {
    flex: 0 0 30%;
    /* 幅を40%に設定 */
    background-color: #e0e0e0;
    /* 必要に応じて背景色を設定 */
    padding: 50px 20px;
}

.explaination {
    margin: 5px auto;
    text-align: center;
    padding: 30px;
    background-color: white;
}

#steps {
    display: flex;
    justify-content: space-between;
    /* 子要素間のスペースを均等に配置 */
    align-items: flex-start;
    /* 子要素の縦方向の揃え方を指定 */
}

#steps>div {
    flex: 1;
    /* 各子要素を同じ幅にする */
    margin: 0 10px;
    /* 子要素間の余白を追加 */
}


.parallax {
    perspective: 100px;
    height: 100vh;
    overflow-x: hidden;
    overflow-y: auto;
    position: absolute;
    top: 0;
    left: 50%;
    right: 0;
    bottom: 0;
    margin-left: -1500px;
}

.parallax__layer {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
}

.parallax__cover {}

$parallax__layers: 6;

@for $i from 0 through $parallax__layers {
    $x: (
        $parallax__layers - $i) / 2;

    .parallax__layer__#{$i} {
        transform: translateZ(-100 * $x#{px}) scale($x + 1
    );
}
}